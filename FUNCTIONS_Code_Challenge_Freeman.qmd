---
title: "Code_Challenege_Functions"
format: html
editor: visual
---

# Randy's comments

* thanks for fixing this-worked without issue this time.  Thing of beauty.
* now please add a reflection about this experience, or let me know where it is if I am missing it.
* Nice idea to take a 'functions first' approach with your commentary
* now that you have this in a reproducible format (everything works without any modifications from me), I hope you will help someone else along the way with these functions and share your code.


## FIXED VERSION

## This is the breakdown of the functions used to make the change in ecosystem graph from the coding challenge.

#### Firstly I will library the packages needed and read in all the data

```{r}
#Read in packages
library(ggplot2)
library(readr) 
library(tidyverse)

#Read in input data 
combine_raw <- read_csv("input_data/combine_raw.csv")
LF16_BPS_200 <- read_csv("input_data/LF16_BPS_200.csv")
scls_aoi_attributes <- read_csv("input_data/scls_aoi_attributes.csv")
ref_con_modified <- read_csv("input_data/ref_con_modified.csv")
bps_model_number_name <- read_csv("input_data/bps_model_number_name.csv")
bps_aoi_attributes <- read_csv("input_data/bps_aoi_attributes.csv")
```

#### ref_con\_ modified is shortened to ref_con. Then pivot longer is used to transform the data from a wide format to a long format with the columns Model_Code, refLabel, and refPercent. Unite is used to combine the Model_Code and refLabel to one column, which is then used to join the bps_model_number_name data frame using the function left_join.

```{r}
ref_con <- ref_con_modified %>%
  pivot_longer(!Model_Code, names_to = "refLabel", values_to = "refPercent") %>%
  unite(model_label, c("Model_Code", "refLabel"), remove = FALSE) %>%
  left_join(bps_model_number_name)
```

#### Subset and select specific information from the bps_aoi_attributes and aoi_con data frames

```{r}
aoi_bps_models <- bps_aoi_attributes$BPS_MODEL
aoi_ref_con <- subset(ref_con, Model_Code %in% aoi_bps_models)
```

#### join combined_raw data with the scls_aoi_attributes by selecting columns 2,4 by "var2" and "VALUE"

```{r}
#bring in s-class labels
combine <- left_join(combine_raw, 
                  scls_aoi_attributes %>%
                    dplyr::select(2, 4),  
                  by = c("Var2" = "VALUE"))
```

#### Bring in the bps labels by joining the data from combine "Var1" with the data from LF16_BPS_200 "VALUE" column

```{r}
#bring in bps labels
combine <- left_join(combine, 
                  LF16_BPS_200 %>%
                    dplyr::select(1:4),
                  by = c("Var1" = "VALUE"))
```

#### group_by allows to group data frames by one or more variables. It will be used to group Var1 with BPS_model. Then the mutate function will be used to calculate the current percents of the classes. This is done by summing the frequency and then dividing by the total_count and multiplying by 100. Lastly, unite will be used to combine data from BPS_MODEL and LABEL into one column titled model_label.

```{r}
# calculate current sclass percents
combine <- combine %>%
  group_by(Var1, BPS_MODEL) %>%
  mutate(total_count = sum(Freq)) %>%
  mutate(currentPercent = as.integer((Freq/total_count)*100)) %>%
  unite(model_label, c("BPS_MODEL", "LABEL"))
```

#### We will be joining the aoi_ref_con data table to our current combine data table. drop_na drops any values that are missing from the data table. We use mutate the currentPercent to change the data type into a numeric data type and check for any missing data.We do the same with the total_count data. Select is used to pick and choose which data columns we need in our final data table. Then we can rename these data columns more appropriately.

```{r}
aoi_ref_cur <- left_join(aoi_ref_con,
                         combine) %>%
                         drop_na(refPercent) %>%
                         mutate(currentPercent = as.numeric(currentPercent),
                                currentPercent = ifelse(is.na(currentPercent), 0, currentPercent)) %>%
                         mutate(total_count = as.numeric(total_count),
                                total_count = ifelse(is.na(total_count), 0, total_count)) %>%
                         select(-c(BPS_CODE, ZONE)) %>%
                         select(c(Freq,
                                  Var1,
                                  Var2,
                                  BpS_Name,
                                  Model_Code,
                                  refLabel,
                                  model_label,
                                  refPercent,
                                  currentPercent,
                                  total_count)) %>%
                          rename(count = Freq,
                                 bps_value = Var1,
                                 scl_value = Var2,
                                 bps_name = BpS_Name)
```

#### We will do some last minute re-arranging of the data table using group_by, mutate, arange, filter, select, and pivot longer.

```{r}
bps_scls_top <- aoi_ref_cur %>%
  group_by(Model_Code) %>%
  mutate(total_count = ifelse(total_count == 0, max(total_count), total_count)) %>%
  arrange(desc(total_count))  %>%
  ungroup() %>%
  dplyr::filter(dense_rank(desc(total_count)) < 4) %>%
  dplyr::select(c("bps_name", "refLabel",  "currentPercent", "refPercent")) %>%
  pivot_longer(
    cols = c(`refPercent`, `currentPercent`), 
    names_to = "ref_cur", 
    values_to = "percent"
    )
```

This next part is modifying re_label to convert it into a factor with levels

```{r}
# order classes
bps_scls_top$ref_label <- factor(bps_scls_top$refLabel, 
                                 levels = c(
  "Developed",
  "Agriculture",
  "UE",
  "UN",
  "E",
  "D",
  "C",
  "B",
  "A"))
```

Finally, the plot can be constructed using ggplot

```{r}
sclasplot <-
  ggplot(bps_scls_top, aes(fill = factor(ref_cur), y = percent, x = ref_label)) + 
  geom_col(width = 0.8, position = position_dodge()) +
  coord_flip() +
  facet_grid(. ~BpS) +
  scale_x_discrete(limits = (levels(bps_scls_top$ref_label))) +
  labs(
    title = "Succession Classes past and present",
    subtitle = "Top BpSs selected for illustration. Not all succession classes present in all BpSs",
    caption = "Data from landfire.gov.",
    x = "",
    y = "Percent") +
  theme_minimal(base_size = 12) +
  theme(plot.caption = element_text(hjust = 0, face = "italic"), #Default is hjust=1
        plot.title.position = "plot", #NEW parameter. Apply for subtitle too.
        plot.caption.position =  "plot") +
  scale_fill_manual(values = c("#3d4740", "#32a852" ), # present (grey), historical (green)
                    name = " ", 
                    labels = c("Present",
                               "Past")) +
  facet_wrap(~bps_name, nrow(3),labeller = labeller(bps_name = label_wrap_gen())) +
    theme(panel.spacing = unit(.05, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 1), 
        strip.background = element_rect(color = "black", size = 1))

sclasplot
```
